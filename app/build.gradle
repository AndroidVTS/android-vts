import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "com.nowsecure.android.vts"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 13
        versionName "v.13"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }

    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        // This tells gradle to include the objects in libs/ which were generated by running our
        // Android.mk basically by shelling out
        jniLibs.srcDir 'src/main/libs'
    }
}

android {
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

repositories {
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.0.1'
    compile 'com.android.support:cardview-v7:25.0.1'
    compile 'com.android.support:design:25.0.1'
    compile 'com.evernote:android-job:1.0.8'
    compile 'com.github.paolorotolo:appintro:4.0.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'commons-io:commons-io:2.5'
    compile 'io.reactivex:rxandroid:1.2.0'
    compile 'org.apache.commons:commons-compress:1.12'
    compile('com.github.afollestad.material-dialogs:core:0.8.6.2@aar') {
        transitive = true
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')
def jniSrcDir = file('src/main/jni').absolutePath // Change src/main/jni the relative path to your jni source

task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir\\ndk-build.cmd", '-C', jniSrcDir,
                '-j', Runtime.runtime.availableProcessors()
    } else {
        commandLine "$ndkDir/ndk-build", '-C', jniSrcDir,
                '-j', Runtime.runtime.availableProcessors()
    }
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir\\ndk-build.cmd", '-C', jniSrcDir,
                'clean'
    } else {
        commandLine "$ndkDir/ndk-build", '-C', jniSrcDir,
                'clean'
    }
}

clean.dependsOn 'cleanNative'


tasks.withType(JavaCompile) {
   compileTask -> compileTask.dependsOn buildNative
}
