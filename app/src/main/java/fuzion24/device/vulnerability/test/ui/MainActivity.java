package fuzion24.device.vulnerability.test.ui;

import android.content.Intent;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.content.res.Configuration;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.nowsecure.android.vts.BuildConfig;
import com.nowsecure.android.vts.R;


import java.util.List;

import fuzion24.device.vulnerability.test.ResultsCallback;
import fuzion24.device.vulnerability.test.VulnerabilityTestResult;
import fuzion24.device.vulnerability.test.VulnerabilityTestRunner;
import fuzion24.device.vulnerability.test.adapter.RecyclerAdapter;
import fuzion24.device.vulnerability.util.DeviceInfo;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "VULN_TEST";
    private RecyclerView recyclerView;
    private TextView emptyView;
    private FloatingActionButton fabShare;
    private DeviceInfo devInfo;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        toolbar.setTitleTextColor(Color.WHITE);
        setSupportActionBar(toolbar);
        getSupportActionBar().setTitle(R.string.app_name);

        emptyView = (TextView) findViewById(R.id.emptyView);
        recyclerView = (RecyclerView) findViewById(R.id.recyclerView);

        final TextView tvKernelVersion = (TextView) findViewById(R.id.kernelVersion);
        final TextView tvBuildFingerPrint = (TextView) findViewById(R.id.buildFingerPrint);
        final TextView tvBuildID = (TextView) findViewById(R.id.buildID);
        final TextView tvBuildBrand = (TextView) findViewById(R.id.buildBrand);
        final TextView tvBuildManuf = (TextView) findViewById(R.id.buildManufacturer);
        final TextView tvBuildModel = (TextView) findViewById(R.id.buildModel);
        final TextView tvBuildRelease = (TextView) findViewById(R.id.buildRelease);
        final TextView tvBuildSDK = (TextView) findViewById(R.id.buildSDK);

        devInfo = DeviceInfo.getDeviceInfo();
        tvBuildFingerPrint.setText(devInfo.getBuildFingerPrint());
        tvBuildID.setText(devInfo.getBuildID());
        tvKernelVersion.setText(devInfo.getKernelVersion());
        tvBuildBrand.setText(devInfo.getBuildBrand());
        tvBuildManuf.setText(devInfo.getBuildManufacturer());
        tvBuildModel.setText(devInfo.getBuildModel());
        tvBuildRelease.setText(devInfo.getBuildRelease());
        tvBuildSDK.setText(devInfo.getBuildSDK());

        FloatingActionButton fabStart = (FloatingActionButton)findViewById(R.id.fabStart);

        fabShare = (FloatingActionButton)findViewById(R.id.fabShare);

        fabStart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                runTestsSuit();
            }
        });
    }

    private JSONObject serializeResults(List<VulnerabilityTestResult> results, DeviceInfo devInfo) throws JSONException {
        // not sure if this is too intense to do on the main thread...
        JSONArray testResults = new JSONArray();
        JSONObject buildInfo = new JSONObject();
        JSONObject combinedResults = new JSONObject();
        buildInfo.put("fingerprint", devInfo.getBuildFingerPrint());
        buildInfo.put("kernelVersion", devInfo.getKernelVersion());
        buildInfo.put("brand", devInfo.getBuildBrand());
        buildInfo.put("manufacturer", devInfo.getBuildManufacturer());
        buildInfo.put("model", devInfo.getBuildModel());
        buildInfo.put("release", devInfo.getBuildRelease());
        buildInfo.put("sdk", devInfo.getBuildSDK());
        buildInfo.put("id", devInfo.getBuildID());
        buildInfo.put("versionCode", BuildConfig.VERSION_CODE);
        buildInfo.put("versionName", BuildConfig.VERSION_NAME);

        for (VulnerabilityTestResult s : results) {
            JSONObject res = new JSONObject();
            res.put("name", s.getName());
            res.put("isVulnerable", s.isVulnerable());
            res.put("exception", s.getException());
            testResults.put(res);
        }

        combinedResults.put("buildInfo", buildInfo);
        combinedResults.put("results", testResults);
        return combinedResults;

    }


    private void runTestsSuit(){
        new VulnerabilityTestRunner(MainActivity.this, true, new ResultsCallback() {
            @Override
            public void finished(final List<VulnerabilityTestResult> results) {
                Log.d(TAG, "Device Vulnerability callback, finished");

                emptyView.setVisibility(View.GONE);
                recyclerView.setLayoutManager(new LinearLayoutManager(MainActivity.this));

                RecyclerAdapter recyclerAdapter = new RecyclerAdapter(MainActivity.this, results);

                recyclerView.setAdapter(recyclerAdapter);

                fabShare.setVisibility(View.VISIBLE);
                fabShare.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        Intent shareIntent = new Intent(Intent.ACTION_SEND);
                        shareIntent.setType("text/plain");
                        shareIntent.putExtra(Intent.EXTRA_SUBJECT, "Android VTS Results");
                        try {
                            JSONObject json = serializeResults(results, devInfo);
                            shareIntent.putExtra(Intent.EXTRA_TEXT, json.toString(4));
                            startActivity(Intent.createChooser(shareIntent, "Share results via"));
                        } catch (JSONException e) {
                            Log.d(TAG, "Json exception: " + e.getMessage());
                            Toast.makeText(v.getContext(), "error serializing result", Toast.LENGTH_LONG).show();
                        }
                    }
                });

            }
        }).execute();
    }




    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
    }

}
