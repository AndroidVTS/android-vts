package fuzion24.device.vulnerability.vulnerabilities.kernel;

import android.content.Context;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

import fuzion24.device.vulnerability.util.CPUArch;
import fuzion24.device.vulnerability.vulnerabilities.VulnerabilityTest;

/**
 * Created by Till Busse on 21/11/16.
 * Java implementation to test dirtyCow vulnerability.
 */

public class CVE_2016_5195 implements VulnerabilityTest {
    static {
        System.loadLibrary("dirtyCow");
    }
    private final String file1Name = "file1";
    private final String file2Name = "file2";
    private final String file1Content = "This is File one.";
    private final String file2Content = "Mo0h";
    @Override
    public String getCVEorID() {
        return "CVE-2016-5195";
    }

    private native int runDirtyCow(Object [] paths);

    @Override
    public boolean isVulnerable(Context context) throws Exception {
        try{

            List<Object> paths = createFiles(context);
            boolean isWritten = checkFileContent(context, file1Name, file1Content);
            if (!isWritten)
                throw new Exception("Error running test. File could not be created with specific content");

            int checkVal = runDirtyCow(paths.toArray());
            if (checkVal == 0){
                isWritten = checkFileContent(context, file1Name, file2Content);
                return isWritten;
            }else {
                throw new Exception("Error running test. Errno: " + checkVal);
            }
        }finally {
            // delete files when done
            File file;
            file = new File(context.getFilesDir(), file1Name);
            file.delete();
            file = new File(context.getFilesDir(), file1Name);
            file.delete();
        }
    }

    @Override
    public List<CPUArch> getSupportedArchitectures() {
        ArrayList<CPUArch> archs = new ArrayList<>();
        archs.add(CPUArch.ALL);
        return archs;
    }

    private List<Object> createFiles(Context context){
        List<Object> paths = new ArrayList<>();
        paths.add(0, context.getFilesDir().getAbsolutePath() + "/" + file1Name);
        paths.add(1, context.getFilesDir().getAbsolutePath() + "/" + file2Name);
        FileOutputStream outputStream;

        try {
            outputStream = context.openFileOutput(file1Name, Context.MODE_PRIVATE);
            outputStream.write(file1Content.getBytes());
            outputStream = context.openFileOutput(file2Name, Context.MODE_PRIVATE);
            outputStream.write(file2Content.getBytes());
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return paths;
    }
    private boolean checkFileContent(Context context, String filename, String content){
        File fileCheck = context.getFilesDir();
        //Get the text file
        File file = new File(fileCheck,filename);
        //Read text from file
        StringBuilder text = new StringBuilder();
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;

            while ((line = br.readLine()) != null) {
                text.append(line);
                //text.append('\n');
            }
            br.close();
        }catch (IOException e) {
            e.printStackTrace();
        }
        return content.equals(text.substring(0, content.length()));
    }
}
