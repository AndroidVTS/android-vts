import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "com.nowsecure.android.vts"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 13
        versionName "v.13"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
        }
    }

    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        // This tells gradle to include the objects in libs/ which were generated by running our
        // Android.mk basically by shelling out
        jniLibs.srcDir 'src/main/libs'
    }
}

android {
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.evernote:android-job:1.2.6'
    implementation 'com.github.paolorotolo:appintro:v5.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'commons-io:commons-io:2.6'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'org.apache.commons:commons-compress:1.18'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
}

def ndkDir = project.android.ndkDirectory
if (ndkDir == null) {
    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkDir = properties.getProperty('ndk.dir')
    }
    else if (System.getenv('ANDROID_NDK_HOME') != null) {
        ndkDir = System.getenv('ANDROID_NDK_HOME')
    }
}
if (ndkDir == null) {
    throw new GradleException("NDK location not found. Define location with ndk.dir in the " +
            "local.properties file or with an ANDROID_NDK_HOME environment variable.")
}
def jniSrcDir = file('src/main/jni').absolutePath // Change src/main/jni the relative path to your jni source

task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir\\ndk-build.cmd", '-C', jniSrcDir,
                '-j', Runtime.runtime.availableProcessors()
    } else {
        commandLine "$ndkDir/ndk-build", '-C', jniSrcDir,
                '-j', Runtime.runtime.availableProcessors()
    }
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir\\ndk-build.cmd", '-C', jniSrcDir,
                'clean'
    } else {
        commandLine "$ndkDir/ndk-build", '-C', jniSrcDir,
                'clean'
    }
}

clean.dependsOn 'cleanNative'

tasks.withType(JavaCompile) {
   compileTask -> compileTask.dependsOn buildNative
}
